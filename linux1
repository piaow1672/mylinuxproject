#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 12000
#define BUFFER_SIZE 2048

int main() {
    int serverSocket;
    struct sockaddr_in serverAddr, clientAddr;
    socklen_t addr_size;
    char buffer[BUFFER_SIZE];

    // 创建套接字
    serverSocket = socket(PF_INET, SOCK_DGRAM, 0);
    if (serverSocket < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // 配置服务器地址结构
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(PORT);
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    memset(serverAddr.sin_zero, '\0', sizeof(serverAddr.sin_zero));

    // 绑定套接字
    if (bind(serverSocket, (struct sockaddr *) &serverAddr, sizeof(serverAddr)) != 0) {
        perror("Bind failed");
        exit(EXIT_FAILURE);
    }

    printf("The server is ready to receive\n");

    // 接收数据并发送回客户端
    while (1) {
        addr_size = sizeof(clientAddr);
        recvfrom(serverSocket, buffer, BUFFER_SIZE, 0, (struct sockaddr *) &clientAddr, &addr_size);
        printf("Received: %s\n", buffer);

        for (int i = 0; buffer[i]; i++) {
            buffer[i] = toupper(buffer[i]);
        }

        sendto(serverSocket, buffer, strlen(buffer), 0, (struct sockaddr *) &clientAddr, addr_size);
    }

    // 关闭套接字
    close(serverSocket);

    return 0;
}











#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 12000
#define BUFFER_SIZE 2048

int main() {
    int clientSocket;
    struct sockaddr_in serverAddr;
    socklen_t addr_size;
    char buffer[BUFFER_SIZE];
    char message[BUFFER_SIZE];

    // 创建套接字
    clientSocket = socket(PF_INET, SOCK_DGRAM, 0);
    if (clientSocket < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // 配置服务器地址结构
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(PORT);
    serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
    memset(serverAddr.sin_zero, '\0', sizeof(serverAddr.sin_zero));

    // 输入并发送数据
    printf("Input lowercase sentence: ");
    fgets(message, BUFFER_SIZE, stdin);
    sendto(clientSocket, message, strlen(message), 0, (struct sockaddr *) &serverAddr, sizeof(serverAddr));

    // 接收服务器响应
    addr_size = sizeof(serverAddr);
    recvfrom(clientSocket, buffer, BUFFER_SIZE, 0, (struct sockaddr *) &serverAddr, &addr_size);
    printf("From Server: %s\n", buffer);

    // 关闭套接字
    close(clientSocket);

    return 0;
}



















#!/bin/bash

### A simple UDP demo script ###

set -euC

tmux rename-window "UDP demo"

#    Window setup
# +--------+--------+
# | server | client |
# +--------+--------+
# |     tcpdump     |
# +-----------------+
#
tmux split-window -h
tmux split-window -fl99

tmux send-keys -t{top-left} "gcc udpServer.c -o udpServer && ./udpServer" C-m
tmux send-keys -t{top-right} "gcc udpClient.c -o udpClient && ./udpClient" C-m
tmux send-keys "sudo tcpdump -ilo -vvvnnxXK -s0 port 12000" C-m
